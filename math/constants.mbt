///|
pub const RADIX : UInt = 2U

///|
pub const MANTISSA_DIGITS : UInt = 53U

///|
pub const DIGITS : UInt = 15U

///| INT_MAX is the maximum value an `Int` can represent. 2147483647
pub const INT_MAX : Int = 2147483647

///| INT64_MAX is the maximum value an `Int64` can represent. 9223372036854775807
pub const INT64_MAX : Int64 = 9223372036854775807

///| UINT_MAX is the maximum value an `UInt` can represent. 4294967295
pub const UINT_MAX : UInt = 4294967295U

///| UINT64_MAX is the maximum value an `UInt64` can represent. 18446744073709551615
pub const UINT64_MAX : UInt64 = 18446744073709551615UL

///| Epsilon is the minimum value that make double `1.0 + epsilon != 1.0`. 2.2204460492503131e-16
pub const DOUBLE_EPSILON : Double = 2.2204460492503131e-16

///| The smallest positive value that can be represented by a double. 2.2250738585072014E-308
pub const DOUBLE_MIN : Double = -1.7976931348623157E+308

///| The smallest positive value that can be represented by a double. 2.2250738585072014E-308
pub const DOUBLE_MIN_POSITIVE : Double = 2.2250738585072014E-308

///| The largest positive value that can be represented by a double. 1.7976931348623157E+308
pub const DOUBLE_MAX : Double = 1.7976931348623157E+308

///| The minimum exponent a normalized double can have (IEEE 754). -1021
pub const DOUBLE_MIN_EXP : Int = -1021

///| The maximum exponent a normalized double can have (IEEE 754). 1024
pub const DOUBLE_MAX_EXP : Int = 1024

///| The minimum exponent a normalized double can have (base 10). -307
pub const DOUBLE_MIN_10_EXP : Int = -307

///| The maximum exponent a normalized double can have (base 10). 308
pub const DOUBLE_MAX_10_EXP : Int = 308

///| Nature Exponent, 2.7182818284590452354
pub const E : Double = 2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427

///| The ratio of the circumference of a circle to its diameter. 3.14159265358979323846
pub const PI : Double = 3.14159265358979323846

///| PI/2, 1.57079632679489661923
pub const PI_OVER_2 : Double = 1.57079632679489661923

///| PI/4, 0.785398163397448309616
pub const PI_OVER_4 : Double = 0.785398163397448309616

///| 1/PI, 0.318309886183790671538
pub const ONE_OVER_PI : Double = 0.318309886183790671538

///| 2/PI, 0.636619772367581343076
pub const TWO_OVER_PI : Double = 0.636619772367581343076

///| 1/sqrt(PI), 0.564189583547756286948
pub const INV_SQRT_PI : Double = 0.564189583547756286948

///| 2/sqrt(PI), 1.12837916709551257390
pub const TWO_OVER_SQRTPI : Double = 1.12837916709551257390

///| sqrt(2), 1.41421356237309504880
pub const SQRT2 : Double = 1.41421356237309504880

///| 1/sqrt(2), 0.707106781186547524401
pub const SQRT1_OVER_2 : Double = 0.707106781186547524401

///| sqrt(3), 1.73205080756887729353
pub const SQRT3 : Double = 1.73205080756887729353

///| sqrt(5), 2.23606797749978969640
pub const SQRT5 : Double = 2.23606797749978969640

///| ln(2), 0.693147180559945309417
pub const LN2 : Double = 0.693147180559945309417

///| ln(10), 2.30258509299404568402
pub const LN10 : Double = 2.30258509299404568402

///| log2(e), 1.44269504088896340736
pub const LOG2E : Double = 1.44269504088896340736

///| log10(e), 0.434294481903251827651
pub const LOG10E : Double = 0.434294481903251827651

///| log(pi), 1.14472988584940017414
pub const LOGPI : Double = 1.14472988584940017414

///| golden ratio, 1.61803398874989484820
pub const GOLDEN_RATIO : Double = 1.61803398874989484820

// The speed of light in vacuum, in meters per second.
// pub const C: Double = 299792458.0;
